[{"_path":"/conventions/exception-handling","_dir":"conventions","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Exception Handling","description":"Gazel uses .NET exceptions to handle errors in your business code. For every\r\nerror message there should be a corresponding exception class.","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Gazel uses .NET exceptions to handle errors in your business code. For every\r\nerror message there should be a corresponding exception class."}]},{"type":"element","tag":"h2","props":{"id":"writing-an-exception"},"children":[{"type":"text","value":"Writing an Exception"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Create a parent static class for each group of your exceptions and define all\r\nrelated exceptions under this class as a nested class."}]},{"type":"element","tag":"code","props":{"code":"using static MyProduct.ResultCodes;\r\n\r\nnamespace MyProduct;\r\n\r\npublic static class CommonExceptions\r\n{\r\n    public class NameShouldBeUnique : ServiceException\r\n    {\r\n        public NameShouldBeUnique() : base(Common.Err(0)) { }\r\n    }\r\n\r\n    public class ValueIsRequired : ServiceException\r\n    {\r\n        public ValueIsRequired() : base(Common.Err(1)) { }\r\n    }\r\n}\r\n\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"using static MyProduct.ResultCodes;\r\n\r\nnamespace MyProduct;\r\n\r\npublic static class CommonExceptions\r\n{\r\n    public class NameShouldBeUnique : ServiceException\r\n    {\r\n        public NameShouldBeUnique() : base(Common.Err(0)) { }\r\n    }\r\n\r\n    public class ValueIsRequired : ServiceException\r\n    {\r\n        public ValueIsRequired() : base(Common.Err(1)) { }\r\n    }\r\n}\r\n\n"}]}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":warning:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Exceptions should inherit from "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ServiceException"}]},{"type":"text","value":" to be treated as handled\r\nerrors. Handled errors are HTTP status "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"4XX"}]},{"type":"text","value":" in REST API and they are logged\r\nin "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"WARN"}]},{"type":"text","value":" level."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"All other exceptions are treated as unhandled errors with code "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"99999"}]},{"type":"text","value":",\r\nlogged in "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ERROR"}]},{"type":"text","value":" level and HTTP status is always "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"500"}]},{"type":"text","value":" in REST API."}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":information_source:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ResultCodes"}]},{"type":"text","value":" is a class that generates error codes, but we will mention this\r\nlater in this section. You can find a detailed description in "},{"type":"element","tag":"a","props":{"href":"/features#exception-handling"},"children":[{"type":"text","value":"Features /\r\nException Handling"}]}]}]},{"type":"element","tag":"h2","props":{"id":"throwing-an-exception"},"children":[{"type":"text","value":"Throwing an Exception"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To throw an exception you can use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"using static"}]},{"type":"text","value":" directive to include\r\nexceptions class, "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"MyProduct.CommonExceptions"}]},{"type":"text","value":" in this case;"}]},{"type":"element","tag":"code","props":{"code":"using static MyProduct.CommonExceptions;\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"using static MyProduct.CommonExceptions;\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"And then just throw the exception like any other .NET exception;"}]},{"type":"element","tag":"code","props":{"code":"...\r\npublic class Company\r\n{\r\n    ...\r\n    protected internal Company With(string name)\r\n    {\r\n        if(_context.Query<Companies>().AnyByName(name))\r\n        {\r\n            throw new NameShouldBeUnique();\r\n        }\r\n\r\n        ...\r\n    }\r\n    ...\r\n}\r\n...\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"...\r\npublic class Company\r\n{\r\n    ...\r\n    protected internal Company With(string name)\r\n    {\r\n        if(_context.Query<Companies>().AnyByName(name))\r\n        {\r\n            throw new NameShouldBeUnique();\r\n        }\r\n\r\n        ...\r\n    }\r\n    ...\r\n}\r\n...\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"result-codes"},"children":[{"type":"text","value":"Result Codes"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Above mentioned "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ResultCodes"}]},{"type":"text","value":" is a class where you organize your "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"error"}]},{"type":"text","value":",\r\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"warning"}]},{"type":"text","value":" and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"info"}]},{"type":"text","value":" codes as named code blocks;"}]},{"type":"element","tag":"code","props":{"code":"...\r\npublic class ResultCodes : ResultCodeBlocks\r\n{\r\n    public static readonly ResultCodeBlock Common = CreateBlock(1, \"Common\");\r\n}\r\n...\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"...\r\npublic class ResultCodes : ResultCodeBlocks\r\n{\r\n    public static readonly ResultCodeBlock Common = CreateBlock(1, \"Common\");\r\n}\r\n...\n"}]}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":bulb:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You will use this class potentially from every business module, so it's\r\nbetter for this to be included in the most base business module."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Every code block reserves "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"700"}]},{"type":"text","value":" error codes, "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"100"}]},{"type":"text","value":" warning codes and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"100"}]},{"type":"text","value":" info\r\ncodes. In the previous example we've seen "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Common.Err(0)"}]},{"type":"text","value":", this means that\r\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"NameShouldBeUnique"}]},{"type":"text","value":" error should have the first error code in "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Common"}]},{"type":"text","value":" code\r\nblock."}]},{"type":"element","tag":"code","props":{"code":"...\r\npublic NameShouldBeUnique() : base(Common.Err(0)) { } // First error of 'Common' code block\r\n...\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"...\r\npublic NameShouldBeUnique() : base(Common.Err(0)) { } // First error of 'Common' code block\r\n...\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Here, we've started with "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Common.Err(0)"}]},{"type":"text","value":" and can go up to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Common.Err(699)"}]},{"type":"text","value":"\r\nusing "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Common"}]},{"type":"text","value":" code block."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":bulb:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You may create a code block for every business module, so that error codes\r\nare grouped according to their business domain."}]}]},{"type":"element","tag":"h2","props":{"id":"parameterized-exceptions"},"children":[{"type":"text","value":"Parameterized Exceptions"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can accept parameters in your exception classes;"}]},{"type":"element","tag":"code","props":{"code":"...\r\npublic class NameShouldBeUnique : ServiceException\r\n{\r\n    public NameShouldBeUnique(string name) : base(Common.Err(0), name) { }\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"...\r\npublic class NameShouldBeUnique : ServiceException\r\n{\r\n    public NameShouldBeUnique(string name) : base(Common.Err(0), name) { }\r\n}\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Last parameter of base constructor accepts "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"params object[] parameters"}]},{"type":"text","value":" so that\r\nyou can add as many parameters as you want. This parameters are used in\r\nbuilding the exception message that is included in the response."}]},{"type":"element","tag":"h3","props":{"id":"localizing-messages"},"children":[{"type":"text","value":"Localizing Messages"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Error messages will be asked to localization with a key that is unique to each\r\nresult code. For example, "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"NameShouldBeUnique"}]},{"type":"text","value":" exception will have "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ERR-20701"}]},{"type":"text","value":"\r\nerror code."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To include parameters in messages, you can use a format string as your message\r\nsuch as "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"'{0}' already exists, name should be unique"}]},{"type":"text","value":". First parameter will\r\nreplace "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"{0}"}]},{"type":"text","value":", second parameter will replace "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"{1}"}]},{"type":"text","value":", and so on."}]}]},"position":7,"_type":"markdown","_id":"content:conventions:exception-handling.md","_source":"content","_file":"conventions/exception-handling.md","_extension":"md"},{"_path":"/conventions/queries","_dir":"conventions","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Queries","description":"For persistence classes, there needs to be corresponding query class to read\r\nrecords from database. This section focuses on how you can organize your\r\nqueries in your projects.","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For persistence classes, there needs to be corresponding query class to read\r\nrecords from database. This section focuses on how you can organize your\r\nqueries in your projects."}]},{"type":"element","tag":"h2","props":{"id":"query-class-conventions"},"children":[{"type":"text","value":"Query Class Conventions"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The main purpose of query classes is to organize all of the queries of a table\r\ntogether into one place. Query classes are named after their corresponding\r\npersistent class. They are in plural form like below;"}]},{"type":"element","tag":"code","props":{"code":"public class Company { ... }\r\n\r\npublic class Companies : Query<Company>\r\n{\r\n    ...\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class Company { ... }\r\n\r\npublic class Companies : Query<Company>\r\n{\r\n    ...\r\n}\n"}]}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":bulb:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can access pluralization service through "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"IModuleContext.Pluralizer"}]},{"type":"text","value":"\r\nproperty."}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":information_source:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If pluralization service does not provide what you want, you can make use of\r\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"[Name]s"}]},{"type":"text","value":" convention. For instance, there is a persistent class named "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Xyz"}]},{"type":"text","value":",\r\nwhen you name its query class as "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Xyzs"}]},{"type":"text","value":", it will work as well."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Query classes are singleton by convention and its usage is as follows;"}]},{"type":"element","tag":"code","props":{"code":"public class CompanyManager\r\n{\r\n    ...\r\n    public virtual void DeactivateCompanies(string name)\r\n    {\r\n        foreach(var company in _context.Query<Companies>().ByName(name))\r\n        {\r\n            company.Deactivate();\r\n        }\r\n    }\r\n    ...\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class CompanyManager\r\n{\r\n    ...\r\n    public virtual void DeactivateCompanies(string name)\r\n    {\r\n        foreach(var company in _context.Query<Companies>().ByName(name))\r\n        {\r\n            company.Deactivate();\r\n        }\r\n    }\r\n    ...\r\n}\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Query classes are singleton by convention, so you can inject query classes as\r\nwell;"}]},{"type":"element","tag":"code","props":{"code":"public class CompanyManager\r\n{\r\n    private Companies _companies;\r\n\r\n    public CompanyManager(Companies companies) => _companies = companies;\r\n\r\n    public virtual void DeactivateCompanies(string name)\r\n    {\r\n        foreach(var company in _companies.ByName(name))\r\n        {\r\n            company.Deactivate();\r\n        }\r\n    }\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class CompanyManager\r\n{\r\n    private Companies _companies;\r\n\r\n    public CompanyManager(Companies companies) => _companies = companies;\r\n\r\n    public virtual void DeactivateCompanies(string name)\r\n    {\r\n        foreach(var company in _companies.ByName(name))\r\n        {\r\n            company.Deactivate();\r\n        }\r\n    }\r\n}\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Query classes should extend "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Query<T>"}]},{"type":"text","value":" which is an abstract class with helper\r\nfunctionalities to make it simple to implement query methods. To provide these\r\nfunctionalities it requires "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"IModuleContext"}]},{"type":"text","value":" to be injected."}]},{"type":"element","tag":"code","props":{"code":"public class Company { ... }\r\n\r\npublic class Companies : Query<Company>\r\n{\r\n    public Companies(IModuleContext context) : base(context) { }\r\n    ...\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class Company { ... }\r\n\r\npublic class Companies : Query<Company>\r\n{\r\n    public Companies(IModuleContext context) : base(context) { }\r\n    ...\r\n}\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you want to inject other dependencies, you are free to do it like in any\r\nother class."}]},{"type":"element","tag":"h2","props":{"id":"by-methods"},"children":[{"type":"text","value":"By Methods"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"By methods are type of queries that return list of persistent objects."}]},{"type":"element","tag":"code","props":{"code":"public class Company { ... }\r\n\r\npublic class Companies : Query<Company>\r\n{\r\n    ...\r\n    public List<Company> By(string name, City city) =>\r\n        By(c => c.Name.Contains(name) && c.City == city);\r\n    ...\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class Company { ... }\r\n\r\npublic class Companies : Query<Company>\r\n{\r\n    ...\r\n    public List<Company> By(string name, City city) =>\r\n        By(c => c.Name.Contains(name) && c.City == city);\r\n    ...\r\n}\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"By"}]},{"type":"text","value":" method is declared in "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Query<T>"}]},{"type":"text","value":" base class to help you create query\r\nmethods quickly."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":warning:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Query<T>.By"}]},{"type":"text","value":" method accepts an expression that is converted to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"SQL"}]},{"type":"text","value":". This\r\nexpression never runs in your .NET application. Because of this reason you\r\nare not supposed to call methods of persistent classes within these\r\nexpressions.  For example; "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"By(c => c.GetEmployees().Count > 0)"}]},{"type":"text","value":" will not\r\nwork."}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":bulb:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Do not use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Id"}]},{"type":"text","value":" properties for filtering;"}]},{"type":"element","tag":"code","props":{"code":"public class Company { ... }\r\n\r\npublic class Companies : Query<Company>\r\n{\r\n    ...\r\n    public List<Company> By(string name, City city) =>\r\n        By(c => c.Name.Contains(name) && c.City.Id == city.Id);\r\n    ...\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class Company { ... }\r\n\r\npublic class Companies : Query<Company>\r\n{\r\n    ...\r\n    public List<Company> By(string name, City city) =>\r\n        By(c => c.Name.Contains(name) && c.City.Id == city.Id);\r\n    ...\r\n}\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This will cause a "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"NullReferenceException"}]},{"type":"text","value":" when city is "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"null"}]},{"type":"text","value":". Prefer\r\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"c.City == city"}]},{"type":"text","value":" expression, which will handle both cases in one shot."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"A by method can also be implemented like below;"}]},{"type":"element","tag":"code","props":{"code":"public class Company { ... }\r\n\r\npublic class Companies : Query<Company>\r\n{\r\n    ...\r\n    public List<Company> By(string name, City city) =>\r\n        Lookup.List(true).Where(c => c.Name.Contains(name) && c.City == city).ToList();\r\n    ...\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class Company { ... }\r\n\r\npublic class Companies : Query<Company>\r\n{\r\n    ...\r\n    public List<Company> By(string name, City city) =>\r\n        Lookup.List(true).Where(c => c.Name.Contains(name) && c.City == city).ToList();\r\n    ...\r\n}\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Lookup"}]},{"type":"text","value":" property is declared in "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Query<T>"}]},{"type":"text","value":" base class and is of type\r\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ILookup<T>"}]},{"type":"text","value":". This interface acts as a gateway to NHibernate. "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ILookup<T>.List"}]},{"type":"text","value":"\r\nmethod returns an "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"IQueryable<T>"}]},{"type":"text","value":" instance. You may use this instance when "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"By"}]},{"type":"text","value":"\r\nmethod is not enough."}]},{"type":"element","tag":"h3","props":{"id":"single-parameter-convention"},"children":[{"type":"text","value":"Single Parameter Convention"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When there is only one parameter in query methods, we suggest you to include\r\nparameter name in method name like below;"}]},{"type":"element","tag":"code","props":{"code":"public class Transaction { ... }\r\n\r\npublic class Transactions : Query<Transaction>\r\n{\r\n    ...\r\n    public List<Transaction> ByFrom(Account from) => By(t => t.From == from);\r\n    ...\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class Transaction { ... }\r\n\r\npublic class Transactions : Query<Transaction>\r\n{\r\n    ...\r\n    public List<Transaction> ByFrom(Account from) => By(t => t.From == from);\r\n    ...\r\n}\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Consider you have two different queries on "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Transaction"}]},{"type":"text","value":" table, first one\r\nfilters using "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"From"}]},{"type":"text","value":" column, second one filters using "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"To"}]},{"type":"text","value":" column;"}]},{"type":"element","tag":"code","props":{"code":"public class Transaction { ... }\r\n\r\npublic class Transactions : Query<Transaction>\r\n{\r\n    ...\r\n    public List<Transaction> By(Account from) => By(t => t.From == from);\r\n    public List<Transaction> By(Account to) => By(t => t.To == to);\r\n    ...\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class Transaction { ... }\r\n\r\npublic class Transactions : Query<Transaction>\r\n{\r\n    ...\r\n    public List<Transaction> By(Account from) => By(t => t.From == from);\r\n    public List<Transaction> By(Account to) => By(t => t.To == to);\r\n    ...\r\n}\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Above code will not compile because there are two methods with exactly the same\r\nsignature. To make it compile, you need to rename one of them. We prefer\r\nrenaming both to provide consistency in naming;"}]},{"type":"element","tag":"code","props":{"code":"public class Transaction { ... }\r\n\r\npublic class Transactions : Query<Transaction>\r\n{\r\n    ...\r\n    public List<Transaction> ByFrom(Account from) => By(t => t.From == from);\r\n    public List<Transaction> ByTo(Account to) => By(t => t.To == to);\r\n    ...\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class Transaction { ... }\r\n\r\npublic class Transactions : Query<Transaction>\r\n{\r\n    ...\r\n    public List<Transaction> ByFrom(Account from) => By(t => t.From == from);\r\n    public List<Transaction> ByTo(Account to) => By(t => t.To == to);\r\n    ...\r\n}\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"take-and-skip"},"children":[{"type":"text","value":"Take and Skip"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"skip"}]},{"type":"text","value":" and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"take"}]},{"type":"text","value":" extensions methods. They are optional parameters.\r\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"take"}]},{"type":"text","value":" parameter extracts the first n elements from the beginning of the target\r\nsequence. Here is how you can do it;"}]},{"type":"element","tag":"code","props":{"code":"public class Company { ... }\r\n\r\npublic class Companies : Query<Company>\r\n{\r\n    ...\r\n    public List<Company> By(string name, City city, int take) =>\r\n        By(c => c.Name.Contains(name) && c.City == city, take: take);\r\n\r\n    public List<Company> All(string name, City city, int take) =>\r\n        All(c => c.Name.Contains(name) && c.City == city, take: take);\r\n    ...\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class Company { ... }\r\n\r\npublic class Companies : Query<Company>\r\n{\r\n    ...\r\n    public List<Company> By(string name, City city, int take) =>\r\n        By(c => c.Name.Contains(name) && c.City == city, take: take);\r\n\r\n    public List<Company> All(string name, City city, int take) =>\r\n        All(c => c.Name.Contains(name) && c.City == city, take: take);\r\n    ...\r\n}\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"skip"}]},{"type":"text","value":" parameter moves pass the first n elements from the beginning of the\r\ntarget sequence, returning the remainder;"}]},{"type":"element","tag":"code","props":{"code":"public class Company { ... }\r\n\r\npublic class Companies : Query<Company>\r\n{\r\n    ...\r\n    public List<Company> By(string name, City city, int skip) =>\r\n        By(c => c.Name.Contains(name) && c.City == city, skip: skip);\r\n\r\n    public List<Company> All(string name, City city, int skip) =>\r\n        All(c => c.Name.Contains(name) && c.City == city, skip: skip);\r\n    ...\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class Company { ... }\r\n\r\npublic class Companies : Query<Company>\r\n{\r\n    ...\r\n    public List<Company> By(string name, City city, int skip) =>\r\n        By(c => c.Name.Contains(name) && c.City == city, skip: skip);\r\n\r\n    public List<Company> All(string name, City city, int skip) =>\r\n        All(c => c.Name.Contains(name) && c.City == city, skip: skip);\r\n    ...\r\n}\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can apply pagination by using "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"skip"}]},{"type":"text","value":" and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"take"}]},{"type":"text","value":" optional parameters. Here\r\nis how you can do it;"}]},{"type":"element","tag":"code","props":{"code":"public class Company { ... }\r\n\r\npublic class Companies : Query<Company>\r\n{\r\n    ...\r\n    public List<Company> By(string name, int skip, int take) =>\r\n        By(c => c.Name.Contains(name), skip: skip, take:take);\r\n\r\n    public List<Company> All(string name, int skip, int take) =>\r\n        All(c => c.Name.Contains(name), skip: skip, take:take);\r\n    ...\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class Company { ... }\r\n\r\npublic class Companies : Query<Company>\r\n{\r\n    ...\r\n    public List<Company> By(string name, int skip, int take) =>\r\n        By(c => c.Name.Contains(name), skip: skip, take:take);\r\n\r\n    public List<Company> All(string name, int skip, int take) =>\r\n        All(c => c.Name.Contains(name), skip: skip, take:take);\r\n    ...\r\n}\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Alternatively, you can also be implemented by using "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ILookup<T>.List"}]},{"type":"text","value":" as shown\r\nbelow. It actually returns an "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"IQueryable<T>"}]},{"type":"text","value":" instance."}]},{"type":"element","tag":"code","props":{"code":"public class Company { ... }\r\n\r\npublic class Companies : Query<Company>\r\n{\r\n    ...\r\n    public List<Company> By(string name, City city, int take) =>\r\n        Lookup\r\n            .List(true)\r\n            .Where(c => c.Name.Contains(name) && c.City == city)\r\n            .Take(take)\r\n            .ToList();;\r\n\r\n    public List<Company> By(string name, City city, int skip) =>\r\n        Lookup\r\n            .List(true)\r\n            .Where(c => c.Name.Contains(name) && c.City == city)\r\n            .Skip(skip)\r\n            .ToList();;\r\n\r\n    public List<Company> By(string name, City city, int take, int skip) =>\r\n        Lookup\r\n            .List(true)\r\n            .Where(c => c.Name.Contains(name) && c.City == city)\r\n            .OrderByDescending(c => c.City)\r\n            .Skip(skip)\r\n            .Take(take)\r\n            .ToList();\r\n    ...\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class Company { ... }\r\n\r\npublic class Companies : Query<Company>\r\n{\r\n    ...\r\n    public List<Company> By(string name, City city, int take) =>\r\n        Lookup\r\n            .List(true)\r\n            .Where(c => c.Name.Contains(name) && c.City == city)\r\n            .Take(take)\r\n            .ToList();;\r\n\r\n    public List<Company> By(string name, City city, int skip) =>\r\n        Lookup\r\n            .List(true)\r\n            .Where(c => c.Name.Contains(name) && c.City == city)\r\n            .Skip(skip)\r\n            .ToList();;\r\n\r\n    public List<Company> By(string name, City city, int take, int skip) =>\r\n        Lookup\r\n            .List(true)\r\n            .Where(c => c.Name.Contains(name) && c.City == city)\r\n            .OrderByDescending(c => c.City)\r\n            .Skip(skip)\r\n            .Take(take)\r\n            .ToList();\r\n    ...\r\n}\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"orderby-and-orderbydescending"},"children":[{"type":"text","value":"OrderBy and OrderByDescending"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"orderBy"}]},{"type":"text","value":" and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"orderByDescending"}]},{"type":"text","value":" extensions methods. They are\r\noptional parameters."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":information_source:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"orderBy"}]},{"type":"text","value":" and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"orderByDescending"}]},{"type":"text","value":" parameters in "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"By"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"All"}]},{"type":"text","value":",\r\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"FirstBy"}]},{"type":"text","value":",  methods."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"orderby"}]},{"type":"text","value":" parameter sorts the elements of a sequence in ascending order\r\naccording to a key."}]},{"type":"element","tag":"code","props":{"code":"public class Company { ... }\r\n\r\npublic class Companies : Query<Company>\r\n{\r\n    ...\r\n    public List<Company> ByName(string name) =>\r\n        By(c => c.Name.StartsWith(name), orderBy: c => c.Name);\r\n\r\n    public List<Company> All() =>\r\n        All(orderBy: c => c.Name);\r\n\r\n    public List<Company> FirstByName(string name) =>\r\n        FirstBy(c => c.Name.StartsWith(name), orderBy: c => c.Name);\r\n    ...\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class Company { ... }\r\n\r\npublic class Companies : Query<Company>\r\n{\r\n    ...\r\n    public List<Company> ByName(string name) =>\r\n        By(c => c.Name.StartsWith(name), orderBy: c => c.Name);\r\n\r\n    public List<Company> All() =>\r\n        All(orderBy: c => c.Name);\r\n\r\n    public List<Company> FirstByName(string name) =>\r\n        FirstBy(c => c.Name.StartsWith(name), orderBy: c => c.Name);\r\n    ...\r\n}\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"orderByDescending"}]},{"type":"text","value":" parameter sorts the elements of a sequence in\r\ndescending order according to a key."}]},{"type":"element","tag":"code","props":{"code":"public class Company { ... }\r\n\r\npublic class Companies : Query<Company>\r\n{\r\n    ...\r\n    public List<Company> ByName(string name) =>\r\n        By(c => c.Name.StartsWith(name), orderByDescending: c => c.Name);\r\n\r\n    public List<Company> All(string name) =>\r\n        All(orderByDescending: c => c.Name);\r\n\r\n    public List<Company> FirstByName(string name) =>\r\n        FirstBy(c => c.Name.StartsWith(name), orderByDescending: c => c.Name);\r\n    ...\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class Company { ... }\r\n\r\npublic class Companies : Query<Company>\r\n{\r\n    ...\r\n    public List<Company> ByName(string name) =>\r\n        By(c => c.Name.StartsWith(name), orderByDescending: c => c.Name);\r\n\r\n    public List<Company> All(string name) =>\r\n        All(orderByDescending: c => c.Name);\r\n\r\n    public List<Company> FirstByName(string name) =>\r\n        FirstBy(c => c.Name.StartsWith(name), orderByDescending: c => c.Name);\r\n    ...\r\n}\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"firstby-and-singleby"},"children":[{"type":"text","value":"FirstBy and SingleBy"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"FirstBy"}]},{"type":"text","value":" and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"SingleBy"}]},{"type":"text","value":" methods are like "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"By"}]},{"type":"text","value":" methods but they return only one\r\nrecord. "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"FirstBy"}]},{"type":"text","value":" returns the first record matching the given conditions,\r\nwhereas "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"SingleBy"}]},{"type":"text","value":" throws an exception when there are more than one records\r\nmatching the given conditions."}]},{"type":"element","tag":"code","props":{"code":"public class User { ... }\r\n\r\npublic class Users : Query<User>\r\n{\r\n    ...\r\n    public User SingleByEmail(Email email) =>\r\n        SingleBy(u => u.Email == email);\r\n\r\n    public User FirstByRegistrationDate(Date registrationDate) =>\r\n        FirstBy(u => u.RegistrationDate == registrationDate);\r\n    ...\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class User { ... }\r\n\r\npublic class Users : Query<User>\r\n{\r\n    ...\r\n    public User SingleByEmail(Email email) =>\r\n        SingleBy(u => u.Email == email);\r\n\r\n    public User FirstByRegistrationDate(Date registrationDate) =>\r\n        FirstBy(u => u.RegistrationDate == registrationDate);\r\n    ...\r\n}\n"}]}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":information_source:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Single Parameter Convention applies to all query methods. That's why above\r\nmethods are named as "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"SingleByEmail"}]},{"type":"text","value":" and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"FirstByRegistrationDate"}]},{"type":"text","value":" instead of\r\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"SingleBy"}]},{"type":"text","value":" and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"FirstBy"}]},{"type":"text","value":". When you have more than one parameter you may\r\nexclude parameter name from method name (e.g. "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"public User SingleBy(Email email, Password password)"}]},{"type":"text","value":")."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"SingleBy"}]},{"type":"text","value":" method will return "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"null"}]},{"type":"text","value":" when there are no matching records. LINQ\r\nextension methods uses a different convention. "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Single"}]},{"type":"text","value":" methods expects to\r\nreturn one record, if there are none or more than one they will throw an\r\nexception. "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"SingleBy"}]},{"type":"text","value":" methods acts like "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"SingleOrDefault"}]},{"type":"text","value":" method."}]},{"type":"element","tag":"h2","props":{"id":"countby"},"children":[{"type":"text","value":"CountBy"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"As the name implies, "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"CountBy"}]},{"type":"text","value":" methods executes a "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"count"}]},{"type":"text","value":" query and returns an\r\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"int"}]},{"type":"text","value":"."}]},{"type":"element","tag":"code","props":{"code":"public class User { ... }\r\n\r\npublic class Users : Query<User>\r\n{\r\n    ...\r\n    public int CountByRegistrationDate(Date registrationDate) =>\r\n        CountBy(u => u.RegistrationDate == registrationDate);\r\n\r\n    public int CountBy(Gender gender, Date birthDate) =>\r\n        CountBy(u => u.Gender == gender && u.BirthDate == birthDate);\r\n    ...\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class User { ... }\r\n\r\npublic class Users : Query<User>\r\n{\r\n    ...\r\n    public int CountByRegistrationDate(Date registrationDate) =>\r\n        CountBy(u => u.RegistrationDate == registrationDate);\r\n\r\n    public int CountBy(Gender gender, Date birthDate) =>\r\n        CountBy(u => u.Gender == gender && u.BirthDate == birthDate);\r\n    ...\r\n}\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"anyby"},"children":[{"type":"text","value":"AnyBy"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"As the name implies, "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"AnyBy"}]},{"type":"text","value":" method determines whether all elements of a\r\nsequence satisfy a condition and returns a "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"bool"}]},{"type":"text","value":"."}]},{"type":"element","tag":"code","props":{"code":"public class User { ... }\r\n\r\npublic class Users : Query<User>\r\n{\r\n    ...\r\n    public bool AnyByRegistrationDate(Date registrationDate) =>\r\n        AnyBy(u => u.RegistrationDate == registrationDate);\r\n\r\n    public bool AnyBy(Gender gender, Date birthDate) =>\r\n        AnyBy(u => u.Gender == gender && u.BirthDate == birthDate);\r\n    ...\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class User { ... }\r\n\r\npublic class Users : Query<User>\r\n{\r\n    ...\r\n    public bool AnyByRegistrationDate(Date registrationDate) =>\r\n        AnyBy(u => u.RegistrationDate == registrationDate);\r\n\r\n    public bool AnyBy(Gender gender, Date birthDate) =>\r\n        AnyBy(u => u.Gender == gender && u.BirthDate == birthDate);\r\n    ...\r\n}\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"minby-and-maxby"},"children":[{"type":"text","value":"MinBy and MaxBy"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"These aggregate functions take two expressions."}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"An expression of the property on which aggregate function is applied"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"An expression for where clause"}]}]},{"type":"element","tag":"code","props":{"code":"public class Transaction { ... }\r\n\r\npublic class Transactions : Query<Transaction>\r\n{\r\n    ...\r\n    public Money MinAmountBy(DateRange transactionDateRange, CurrencyCode currency) =>\r\n        MinBy(\r\n            //Property expression\r\n            t => t.Amount.Value,\r\n\r\n            //Where clause expression\r\n            t => t.TransactionDate >= transactionDateRange.Start &&\r\n                 t.TransactionDate < transactionDateRange.End &&\r\n                 t.Amount.Currency == currency\r\n        ).ToMoney(currency);\r\n\r\n    public Money MaxAmountBy(DateRange transactionDateRange, CurrencyCode currency) =>\r\n        MaxBy(\r\n            //Property expression\r\n            t => t.Amount.Value,\r\n\r\n            //Where clause expression\r\n            t => t.TransactionDate >= transactionDateRange.Start &&\r\n                 t.TransactionDate < transactionDateRange.End &&\r\n                 t.Amount.Currency == currency\r\n        ).ToMoney(currency);\r\n    ...\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class Transaction { ... }\r\n\r\npublic class Transactions : Query<Transaction>\r\n{\r\n    ...\r\n    public Money MinAmountBy(DateRange transactionDateRange, CurrencyCode currency) =>\r\n        MinBy(\r\n            //Property expression\r\n            t => t.Amount.Value,\r\n\r\n            //Where clause expression\r\n            t => t.TransactionDate >= transactionDateRange.Start &&\r\n                 t.TransactionDate < transactionDateRange.End &&\r\n                 t.Amount.Currency == currency\r\n        ).ToMoney(currency);\r\n\r\n    public Money MaxAmountBy(DateRange transactionDateRange, CurrencyCode currency) =>\r\n        MaxBy(\r\n            //Property expression\r\n            t => t.Amount.Value,\r\n\r\n            //Where clause expression\r\n            t => t.TransactionDate >= transactionDateRange.Start &&\r\n                 t.TransactionDate < transactionDateRange.End &&\r\n                 t.Amount.Currency == currency\r\n        ).ToMoney(currency);\r\n    ...\r\n}\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"optional-where-clauses"},"children":[{"type":"text","value":"Optional Where Clauses"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In a query class, if a condition needs to be included in a query depending on\r\nthe state of a given parameter, an optional where clause can be created as\r\nshown below;"}]},{"type":"element","tag":"code","props":{"code":"public List<Company> By(City city, string name = default, Vkn taxNo = default)\r\n{\r\n    return By(c => c.City == city,\r\n        When(name).IsNot(default).ThenAnd(c => c.Name.StartsWith(name)),\r\n        When(taxNo).IsNot(default).ThenAnd(c => c.TaxNo == taxNo)\r\n    );\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public List<Company> By(City city, string name = default, Vkn taxNo = default)\r\n{\r\n    return By(c => c.City == city,\r\n        When(name).IsNot(default).ThenAnd(c => c.Name.StartsWith(name)),\r\n        When(taxNo).IsNot(default).ThenAnd(c => c.TaxNo == taxNo)\r\n    );\r\n}\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This way you can create reusable query services/methods;"}]},{"type":"element","tag":"code","props":{"code":"companies.By(city);\r\ncompanies.By(city, taxNo: taxNo);\r\ncompanies.By(city, name: name, taxNo: taxNo);\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"companies.By(city);\r\ncompanies.By(city, taxNo: taxNo);\r\ncompanies.By(city, name: name, taxNo: taxNo);\n"}]}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":information_source:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can use optional where clauses in "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"By"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"FirstBy"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"SingleBy"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"MinBy"}]},{"type":"text","value":",\r\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"MaxBy"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"CountBy"}]},{"type":"text","value":" methods."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"An optional where clause is built in 3 steps:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"When"}]}]},{"type":"text","value":": In this step you specify the parameter on which you will check a\r\ncondition."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Is/Not"}]}]},{"type":"text","value":": "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Is"}]},{"type":"text","value":" method expects the given condition to be "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"true"}]},{"type":"text","value":" while\r\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"IsNot"}]},{"type":"text","value":" method expects the given condition to be "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"false"}]},{"type":"text","value":"."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ThenAnd"}]}]},{"type":"text","value":": This is the final step. In this step you provide the where\r\nclause."}]}]},{"type":"element","tag":"code","props":{"code":"When(name).IsNot(default).ThenAnd(c => c.Name.StartsWith(name))\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"When(name).IsNot(default).ThenAnd(c => c.Name.StartsWith(name))\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Together, in the above statement, you stated that there is an optional filter\r\nwhich should be included when name is not "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"default"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The alternative, you can also use as named optional parameters. They must be\r\nthe last ones in method arguments list."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"There are available 2 different ways."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"optional"}]}]},{"type":"text","value":": In this way, you specify the single condition."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"optionals"}]}]},{"type":"text","value":": In this way, you specify the multiple conditions."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can pass the parameter according to the name, as shown below;"}]},{"type":"element","tag":"code","props":{"code":"...\r\npublic List<Company> By(City city, string name = default)\r\n{\r\n    return By(c => c.City == city,\r\n        optional: When(name).IsNot(default).ThenAnd(c => c.Name.StartsWith(name))\r\n    );\r\n}\r\n\r\npublic List<Company> By(City city, string name = default, Vkn taxNo = default)\r\n{\r\n    return By(c => c.City == city,\r\n        optionals: new[] {\r\n            When(name).IsNot(default).ThenAnd(c => c.Name.StartsWith(name)),\r\n            When(taxNo).IsNot(default).ThenAnd(c => c.TaxNo == taxNo)\r\n        }\r\n    );\r\n}\r\n...\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"...\r\npublic List<Company> By(City city, string name = default)\r\n{\r\n    return By(c => c.City == city,\r\n        optional: When(name).IsNot(default).ThenAnd(c => c.Name.StartsWith(name))\r\n    );\r\n}\r\n\r\npublic List<Company> By(City city, string name = default, Vkn taxNo = default)\r\n{\r\n    return By(c => c.City == city,\r\n        optionals: new[] {\r\n            When(name).IsNot(default).ThenAnd(c => c.Name.StartsWith(name)),\r\n            When(taxNo).IsNot(default).ThenAnd(c => c.TaxNo == taxNo)\r\n        }\r\n    );\r\n}\r\n...\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"how-to-use-is"},"children":[{"type":"text","value":"How to use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Is"}]}]},{"type":"element","tag":"code","props":{"code":"//if given name parameter object is expectedName\r\n//then the condition will be included in the query.\r\nWhen(name).Is(n => n == expectedName)\r\n\r\n//you can pass an object instead of an expression\r\n//which will be equivalent to above code\r\nWhen(name).Is(expectedName)\r\n\r\n//There is a shortcut method that does the same job\r\n//that When(name).Is(null) and When(name).Is(default) does\r\nWhen(name).IsDefault()\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"//if given name parameter object is expectedName\r\n//then the condition will be included in the query.\r\nWhen(name).Is(n => n == expectedName)\r\n\r\n//you can pass an object instead of an expression\r\n//which will be equivalent to above code\r\nWhen(name).Is(expectedName)\r\n\r\n//There is a shortcut method that does the same job\r\n//that When(name).Is(null) and When(name).Is(default) does\r\nWhen(name).IsDefault()\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"how-to-use-isnot"},"children":[{"type":"text","value":"How to use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"IsNot"}]}]},{"type":"element","tag":"code","props":{"code":"//if given name parameter object is not excludedName\r\n//then the condition will be included in the query.\r\nWhen(name).IsNot(c => c == excludedName)\r\n\r\n//you can pass an object instead of an expression\r\n//which will be equivalent to above code\r\nWhen(name).IsNot(excludedName)\r\n\r\n//There is a shortcut method that does the same job\r\n//that When(name).IsNot(null) and When(name).IsNot(default) does\r\nWhen(name).IsNotDefault()\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"//if given name parameter object is not excludedName\r\n//then the condition will be included in the query.\r\nWhen(name).IsNot(c => c == excludedName)\r\n\r\n//you can pass an object instead of an expression\r\n//which will be equivalent to above code\r\nWhen(name).IsNot(excludedName)\r\n\r\n//There is a shortcut method that does the same job\r\n//that When(name).IsNot(null) and When(name).IsNot(default) does\r\nWhen(name).IsNotDefault()\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"query-base-class"},"children":[{"type":"text","value":"Query Base Class"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Query<T>"}]},{"type":"text","value":" is an abstract class with helper functionalities to make it simple\r\nto create queries. All methods in this class are "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"protected"}]},{"type":"text","value":". If a method\r\ndeclared in "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Query<T>"}]},{"type":"text","value":" class is to be exposed as a business service, you can\r\noverride its access modifiers with "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"public new"}]},{"type":"text","value":" keyword."}]},{"type":"element","tag":"h3","props":{"id":"singlebyid-and-byids"},"children":[{"type":"text","value":"SingleById and ByIds"}]},{"type":"element","tag":"code","props":{"code":"public abstract class Query<T> : IQuery<T>\r\n{\r\n    ...\r\n    protected virtual T SingleById(int id) { ... }\r\n\r\n    protected virtual List<T> ByIds(List<int> ids) { ... }\r\n    ...\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public abstract class Query<T> : IQuery<T>\r\n{\r\n    ...\r\n    protected virtual T SingleById(int id) { ... }\r\n\r\n    protected virtual List<T> ByIds(List<int> ids) { ... }\r\n    ...\r\n}\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"These methods are protected helper methods and are used by Gazel to find a\r\nrecord by an id or ids. If you want these methods to be available for internal\r\nuse, then you can simply do the following;"}]},{"type":"element","tag":"code","props":{"code":"public class Company { ... }\r\n\r\npublic class Companies : Query<Company>\r\n{\r\n    ...\r\n    internal new Company SingleById(int id)\r\n    {\r\n        return base.SingleById(id);\r\n    }\r\n    ...\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class Company { ... }\r\n\r\npublic class Companies : Query<Company>\r\n{\r\n    ...\r\n    internal new Company SingleById(int id)\r\n    {\r\n        return base.SingleById(id);\r\n    }\r\n    ...\r\n}\n"}]}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":information_source:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"SingleById"}]},{"type":"text","value":" caches the result in request scope, that is, when you make\r\nsubsequent calls to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"SingleById"}]},{"type":"text","value":", only first call will hit database."}]}]},{"type":"element","tag":"h3","props":{"id":"queryall"},"children":[{"type":"text","value":"Query.All"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This method lists all records in corresponding table. This method is\r\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"protected"}]},{"type":"text","value":" in "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Query<T>"}]},{"type":"text","value":" base class. If you want a persistent class to have an\r\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"All"}]},{"type":"text","value":" query as a business service do the following;"}]},{"type":"element","tag":"code","props":{"code":"public class Company { ... }\r\n\r\npublic class Companies : Query<Company>\r\n{\r\n    ...\r\n    public new Company All()\r\n    {\r\n        return base.All();\r\n    }\r\n    ...\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class Company { ... }\r\n\r\npublic class Companies : Query<Company>\r\n{\r\n    ...\r\n    public new Company All()\r\n    {\r\n        return base.All();\r\n    }\r\n    ...\r\n}\n"}]}]}]}]},"position":5,"_type":"markdown","_id":"content:conventions:queries.md","_source":"content","_file":"conventions/queries.md","_extension":"md"}]