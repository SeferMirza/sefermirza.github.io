[{"_path":"/features/options","_dir":"features","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Options","description":"Options are features that you can only enable or disable. Below is a sample\r\noption configuration;","excerpt":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"options"},"children":[{"type":"text","value":"Options"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Options"}]},{"type":"text","value":" are features that you can only enable or disable. Below is a sample\r\noption configuration;"}]},{"type":"element","tag":"code","props":{"code":"// e.g. audit has built in Enabled or Disabled configuration options\r\naudit: c => c.Enabled()\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// e.g. audit has built in Enabled or Disabled configuration options\r\naudit: c => c.Enabled()\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"audit"},"children":[{"type":"text","value":"Audit"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Audit"}]},{"type":"text","value":" feature allows you to audit your entity and service requests.\r\nYou can implement your entity from "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"IAuditable"}]},{"type":"text","value":" to use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"AuditInfo"}]},{"type":"text","value":"\r\ntype property which will allow you to audit your entity. You can give\r\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Audit"}]},{"type":"text","value":" attribute to service methods to audit service requests."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To configure this feature you can use built in "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Enabled()"}]},{"type":"text","value":" and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Disabled()"}]},{"type":"text","value":"\r\noptions. Default option is "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Enabled()"}]},{"type":"text","value":"."}]},{"type":"element","tag":"code","props":{"code":"audit: c => c.Enabled()\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"audit: c => c.Enabled()\n"}]}]}]},{"type":"element","tag":"code","props":{"code":"audit: c => c.Disabled()\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"audit: c => c.Disabled()\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"audit-attribute"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Audit"}]},{"type":"text","value":" Attribute"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Audit"}]},{"type":"text","value":" attribute to audit your service requests. When an audited\r\nservice method is called an interceptor will use the methods implemented in\r\nthe "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Audit"}]},{"type":"text","value":" "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Manager"}]},{"type":"text","value":" to audit your service requests."}]},{"type":"element","tag":"code","props":{"code":"[Audit]\r\npublic async Task RequestWithAudit() => ...;\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"[Audit]\r\npublic async Task RequestWithAudit() => ...;\n"}]}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":warning:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Audit"}]},{"type":"text","value":" "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Manager"}]},{"type":"text","value":" implementation is required."}]}]},{"type":"element","tag":"h4","props":{"id":"implementing-audit-manager"},"children":[{"type":"text","value":"Implementing "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Audit"}]},{"type":"text","value":" "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Manager"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For audit attribute to work, you need to implement "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"IAuditManager"}]},{"type":"text","value":". In this\r\nimplementation you can configure the behaviour of your "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Audit"}]},{"type":"text","value":" "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Manager"}]},{"type":"text","value":" when\r\nyour requests are audited."}]},{"type":"element","tag":"code","props":{"code":"public class AuditManager : IAuditManager\r\n{\r\n    void IAuditManager.SaveRequest(Guid requestId, string serviceInstance, string serviceName, string serviceParameters) => ...;\r\n    void IAuditManager.SaveSuccessfulResponse(Guid requestId, string serviceResponse) => ...;\r\n    void IAuditManager.SaveFailedResponse(Guid requestId, Exception exception) => ...;\r\n    int IAuditManager.GetDailyRequestCount(string serviceInstance, string serviceName, Date date) => ...;\r\n    int IAuditManager.GetMaxDailyRequestCount(string serviceInstance, string serviceName) => 5;\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class AuditManager : IAuditManager\r\n{\r\n    void IAuditManager.SaveRequest(Guid requestId, string serviceInstance, string serviceName, string serviceParameters) => ...;\r\n    void IAuditManager.SaveSuccessfulResponse(Guid requestId, string serviceResponse) => ...;\r\n    void IAuditManager.SaveFailedResponse(Guid requestId, Exception exception) => ...;\r\n    int IAuditManager.GetDailyRequestCount(string serviceInstance, string serviceName, Date date) => ...;\r\n    int IAuditManager.GetMaxDailyRequestCount(string serviceInstance, string serviceName) => 5;\r\n}\n"}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"SaveRequest()"}]},{"type":"text","value":": During every request interceptor calls the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"SaveRequest()"}]},{"type":"text","value":"\r\nmethod. You can use this method for keeping a request log."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"SaveSuccessfulResponse()"}]},{"type":"text","value":": You can use this method to save the information\r\nof requests with successful response."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"SaveFailedResponse()"}]},{"type":"text","value":": You can use this method to save the information\r\nof requests with failed response."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GetDailyRequestCount()"}]},{"type":"text","value":": Using the request log edited in "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"SaveRequest()"}]},{"type":"text","value":"\r\nyou can find the request count for each service."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GetMaxDailyRequestCount()"}]},{"type":"text","value":": You can configure the limit in the audit manager\r\nusing "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GetMaxDailyRequestCount()"}]},{"type":"text","value":". Using this method you can set maximum daily\r\nrequest of each service. In this example maximum daily request is constant,\r\nyou can implement a logic to determine unique maximum daily request for each\r\nservice."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"After implementing the "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Audit"}]},{"type":"text","value":" "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Manager"}]},{"type":"text","value":", to audit your service requests you\r\nonly need to give audit attribute to your service methods."}]},{"type":"element","tag":"h4","props":{"id":"limiting-daily-request"},"children":[{"type":"text","value":"Limiting Daily Request"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Audit"}]},{"type":"text","value":" feature is enabled you can also limit daily service requests. When\r\nthere is a service request, interceptor uses "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GetDailyRequestCount()"}]},{"type":"text","value":" of your\r\n"},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Audit"}]},{"type":"text","value":" "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Manager"}]},{"type":"text","value":" to get the daily request count and if it exceeds the maximum\r\ndaily request amount it will throw an exception."}]},{"type":"element","tag":"code","props":{"code":"audit: c => c.Enabled(limitDailyRequest: true)\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"audit: c => c.Enabled(limitDailyRequest: true)\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"auditable-entity"},"children":[{"type":"text","value":"Auditable Entity"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can audit your entity class by implementing them from "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"IAuditable"}]},{"type":"text","value":" and add\r\nthe "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"AuditInfo"}]},{"type":"text","value":" type property to your entity. This property is used to add\r\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"CreateDate"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"CreateUserId"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ModifyDate"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ModifyUserId"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ModifyHost"}]},{"type":"text","value":" colums\r\nto your entity database table and keeps them updated. The information except\r\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"CreateDate"}]},{"type":"text","value":" is taken from "},{"type":"element","tag":"a","props":{"href":"/features#authentication"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Authentication"}]}]},{"type":"text","value":" feature."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":" ","src":"/images/features/-images/audit-info.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can implement an entity class from "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"IAuditable"}]},{"type":"text","value":" as seen in the example."}]},{"type":"element","tag":"code","props":{"code":"public class Entity : IAuditable\r\n{\r\n    private readonly IRepository<Entity> _repository;\r\n    private readonly IModuleContext _context;\r\n\r\n    protected Entity() { }\r\n    public Entity(IRepository<Entity> repository, IModuleContext context)\r\n    {\r\n        _repository = repository;\r\n        _context = context;\r\n    }\r\n\r\n    public virtual int Id { get; protected set; }\r\n    public virtual AuditInfo AuditInfo { get; protected set; }\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class Entity : IAuditable\r\n{\r\n    private readonly IRepository<Entity> _repository;\r\n    private readonly IModuleContext _context;\r\n\r\n    protected Entity() { }\r\n    public Entity(IRepository<Entity> repository, IModuleContext context)\r\n    {\r\n        _repository = repository;\r\n        _context = context;\r\n    }\r\n\r\n    public virtual int Id { get; protected set; }\r\n    public virtual AuditInfo AuditInfo { get; protected set; }\r\n}\n"}]}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":information_source:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When audit is disabled, entities implemented from "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"IAuditable"}]},{"type":"text","value":" will not cause\r\nerror."}]}]},{"type":"element","tag":"h2","props":{"id":"decimal-point"},"children":[{"type":"text","value":"Decimal Point"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Decimal point lets you change the way "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Money"}]},{"type":"text","value":" and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"MoneyRange"}]},{"type":"text","value":" value types\r\nare serialized in service layer. It gives you two options "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Always"}]},{"type":"text","value":" and\r\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"AfterTwoDigits"}]},{"type":"text","value":", default configuration is "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Always()"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Always"}]},{"type":"text","value":", when you always expect decimal point separator;"}]},{"type":"element","tag":"code","props":{"code":"// While parsing, this option expects decimal point\r\n// only when there are decimal digits.\r\n// 100USD -> $100\r\n// 1.00USD -> $1.00\r\n\r\ndecimalPoint: c => c.Always()\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// While parsing, this option expects decimal point\r\n// only when there are decimal digits.\r\n// 100USD -> $100\r\n// 1.00USD -> $1.00\r\n\r\ndecimalPoint: c => c.Always()\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"AfterTwoDigits"}]},{"type":"text","value":" when you want last two digits to be treated automatically\r\nas decimal digits;"}]},{"type":"element","tag":"code","props":{"code":"// While parsing, this option treats last two digits\r\n// as decimal digits even if there is no decimal point\r\n// separator and expect decimal point separator only\r\n// when there are more than two decimal digits\r\n// 100USD -> $1.00\r\n// 1.001USD -> $1.001\r\n\r\ndecimalPoint: c => c.AfterTwoDigits(),\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// While parsing, this option treats last two digits\r\n// as decimal digits even if there is no decimal point\r\n// separator and expect decimal point separator only\r\n// when there are more than two decimal digits\r\n// 100USD -> $1.00\r\n// 1.001USD -> $1.001\r\n\r\ndecimalPoint: c => c.AfterTwoDigits(),\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"utc"},"children":[{"type":"text","value":"UTC"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can choose if "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ISystem.Now"}]},{"type":"text","value":" property will use UTC time or local time using\r\nthis option."}]},{"type":"element","tag":"code","props":{"code":"// Uses Utc time\r\nutc: c => c.UseUtcTime()\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// Uses Utc time\r\nutc: c => c.UseUtcTime()\n"}]}]}]},{"type":"element","tag":"code","props":{"code":"// Uses local time\r\nutc: c => c.UseLocalTime()\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// Uses local time\r\nutc: c => c.UseLocalTime()\n"}]}]}]}]},"position":101,"_type":"markdown","_id":"content:features:options.md","_source":"content","_file":"features/options.md","_extension":"md"},{"_path":"/release-notes","_dir":"","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Release Notes","description":"Here you can find what's new in Gazel. We follow [major].[minor].[patch]\r\nversion format. It is basically Semantic Versioning, but with a small\r\ndifference;","excerpt":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"release-notes"},"children":[{"type":"text","value":"Release Notes"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Here you can find what's new in Gazel. We follow "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"[major].[minor].[patch]"}]},{"type":"text","value":"\r\nversion format. It is basically "},{"type":"element","tag":"a","props":{"href":"https://semver.org/","rel":["nofollow"]},"children":[{"type":"text","value":"Semantic Versioning"}]},{"type":"text","value":", but with a small\r\ndifference;"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"[major]"}]},{"type":"text","value":": Starting from v5.x.x, this part will follow major .NET releases\r\nwithout backward compatibility. So if Gazel is on v5.x.x then it is\r\ncompatible with .NET 5, if it is v6.x.x then it is compatible with .NET 6,\r\nand so on."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"[minor]"}]},{"type":"text","value":": When there is a new feature or a breaking change on top of an\r\nexisting major release, it means it is a minor release."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"[patch]"}]},{"type":"text","value":": When new release only includes a bugfix or an improvement without\r\na new feature or breaking change, it is only a patch."}]}]}]},"menu":{"position":6},"section":{"sortBy":"title","order":"desc"},"_type":"markdown","_id":"content:release-notes:index.md","_source":"content","_file":"release-notes/index.md","_extension":"md"}]