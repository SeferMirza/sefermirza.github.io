[{"_path":"/features/file-system","_dir":"features","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"File System","description":"File system feature basically enables you to read/write file content from/to a\r\nfile storage.","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"File system feature basically enables you to read/write file content from/to a\r\nfile storage."}]},{"type":"element","tag":"h2","props":{"id":"ifilesystem-interface"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"IFileSystem"}]},{"type":"text","value":" interface"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When an application has this feature, you can directly inject "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"IFileSystem"}]},{"type":"text","value":" interface\r\ninto your business objects. Below is a simple example;"}]},{"type":"element","tag":"code","props":{"code":"public class FileManager\r\n{\r\n    private readonly IFileSystem _file;\r\n    public FileManager(IFileSystem file) => _file = file;\r\n\r\n    public await Task<Binary> FetchContent(string path)\r\n    {\r\n        return await _file.ReadAsync(path);\r\n    }\r\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class FileManager\r\n{\r\n    private readonly IFileSystem _file;\r\n    public FileManager(IFileSystem file) => _file = file;\r\n\r\n    public await Task<Binary> FetchContent(string path)\r\n    {\r\n        return await _file.ReadAsync(path);\r\n    }\r\n}\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"configuration-file-system-configuration"},"children":[{"type":"text","value":"Configuration {#file-system-configuration}"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Gazel has a built-in implementation that uses local storage."}]},{"type":"element","tag":"code","props":{"code":"builder.Services.AddGazelServiceApplication(\r\n    ...\r\n    fileSystem: c => c.Local(rootPath: \"files\"),\r\n    ...\r\n);\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"builder.Services.AddGazelServiceApplication(\r\n    ...\r\n    fileSystem: c => c.Local(rootPath: \"files\"),\r\n    ...\r\n);\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"rootPath"}]},{"type":"text","value":" is given, all files will be stored under this folder. You might\r\npass an absolute path as well."}]},{"type":"element","tag":"code","props":{"code":"c => c.Local(rootPath: \"/absolute-path\"),\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"c => c.Local(rootPath: \"/absolute-path\"),\n"}]}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":information_source:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Local storage makes sense for development environment. You may use a network\r\npath by giving an absolute path as well."}]}]},{"type":"element","tag":"h2","props":{"id":"customization-file-system-customization"},"children":[{"type":"text","value":"Customization {#file-system-customization}"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When you want to store files in a different type of storage, you can implement\r\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"IFileSystem"}]},{"type":"text","value":" interface and register it using "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Custom"}]},{"type":"text","value":" configurer in\r\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"FileSystemConfigurer"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Assume you've made an S3 implementation of file system interface, you can\r\nregister it as below;"}]},{"type":"element","tag":"code","props":{"code":"c => c.Custom<S3FileSystem>()\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"c => c.Custom<S3FileSystem>()\n"}]}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":bulb:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If your implementation depends on some configuration, write a settings class,\r\nregister it to the IoC and inject it to the file system implementation."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For above example, write a class named "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"S3Settings"}]},{"type":"text","value":" and inject it into\r\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"S3FileSystem"}]},{"type":"text","value":" class, and then register "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"S3Settings"}]},{"type":"text","value":" to the kernel."}]}]}]},"position":7,"_type":"markdown","_id":"content:features:file-system.md","_source":"content","_file":"features/file-system.md","_extension":"md"},{"_path":"/features/options","_dir":"features","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Options","description":"Options are features that you can only enable or disable. Below is a sample\r\noption configuration;","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Options"}]},{"type":"text","value":" are features that you can only enable or disable. Below is a sample\r\noption configuration;"}]},{"type":"element","tag":"code","props":{"code":"// e.g. audit has built in Enabled or Disabled configuration options\r\naudit: c => c.Enabled()\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// e.g. audit has built in Enabled or Disabled configuration options\r\naudit: c => c.Enabled()\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"audit"},"children":[{"type":"text","value":"Audit"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Audit option lets you enable or disable audit information added to your entity\r\ndatabase tables. When enabled, the outlined columns are added to your entity\r\ndatabase tables."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":" ","src":"./-images/audit-info.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To configure this feature you can use built in "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Enabled()"}]},{"type":"text","value":" and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Disabled()"}]},{"type":"text","value":"\r\noptions. Default option is "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Enabled()"}]},{"type":"text","value":"."}]},{"type":"element","tag":"code","props":{"code":"audit: c => c.Enabled()\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"audit: c => c.Enabled()\n"}]}]}]},{"type":"element","tag":"code","props":{"code":"audit: c => c.Disabled()\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"audit: c => c.Disabled()\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can add a request limit if you have enabled this feature."}]},{"type":"element","tag":"code","props":{"code":"audit: c => c.Enabled(limitDailyRequest: true)\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"audit: c => c.Enabled(limitDailyRequest: true)\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"decimal-point"},"children":[{"type":"text","value":"Decimal Point"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Decimal point lets you change the way "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Money"}]},{"type":"text","value":" and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"MoneyRange"}]},{"type":"text","value":" value types\r\nserialized in service layer. It gives you two options "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Always"}]},{"type":"text","value":" and\r\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"AfterTwoDigits"}]},{"type":"text","value":", default configuration is "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Always()"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Always"}]},{"type":"text","value":", when you always expect decimal point separator;"}]},{"type":"element","tag":"code","props":{"code":"// While parsing, this option expects decimal point\r\n// only when there are decimal digits.\r\n// 100USD -> $100\r\n// 1.00USD -> $1.00\r\n\r\ndecimalPoint: c => c.Always()\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// While parsing, this option expects decimal point\r\n// only when there are decimal digits.\r\n// 100USD -> $100\r\n// 1.00USD -> $1.00\r\n\r\ndecimalPoint: c => c.Always()\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"AfterTwoDigits"}]},{"type":"text","value":" when you want last two digits to be treated automatically\r\nas decimal digits;"}]},{"type":"element","tag":"code","props":{"code":"// While parsing, this option treats last two digits\r\n// as decimal digits even if there is no decimal point\r\n// separator and expect decimal point separator only\r\n// when there are more than two decimal digits\r\n// 100USD -> $1.00\r\n// 1.001USD -> $1.001\r\n\r\ndecimalPoint: c => c.AfterTwoDigits(),\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// While parsing, this option treats last two digits\r\n// as decimal digits even if there is no decimal point\r\n// separator and expect decimal point separator only\r\n// when there are more than two decimal digits\r\n// 100USD -> $1.00\r\n// 1.001USD -> $1.001\r\n\r\ndecimalPoint: c => c.AfterTwoDigits(),\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"utc"},"children":[{"type":"text","value":"UTC"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can choose if "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ISystem.Now"}]},{"type":"text","value":" property will use UTC time or local time using\r\nthis option."}]},{"type":"element","tag":"code","props":{"code":"// Uses Utc time\r\nutc: c => c.UseUtcTime()\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// Uses Utc time\r\nutc: c => c.UseUtcTime()\n"}]}]}]},{"type":"element","tag":"code","props":{"code":"// Uses local time\r\nutc: c => c.UseLocalTime()\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// Uses local time\r\nutc: c => c.UseLocalTime()\n"}]}]}]}]},"position":101,"_type":"markdown","_id":"content:features:options.md","_source":"content","_file":"features/options.md","_extension":"md"}]